import sys
import subprocess
from datetime import datetime
from encrypt import encrypt_file
import os

def main():
    if len(sys.argv) < 2:
        print("Usage: feroxbuster.py <target>")
        sys.exit(1)

    target = sys.argv[1]
    date = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    
    # S'assurer que le dossier rapports existe
    rapports_dir = "rapports"
    if not os.path.exists(rapports_dir):
        os.makedirs(rapports_dir)
        print(f"üìÅ Dossier {rapports_dir} cr√©√©")
    
    # Format de nom correct pour l'interface web
    html_path = os.path.join(rapports_dir, f"feroxbuster_{date}.html")
    
    print(f"üîç Scan Feroxbuster en cours sur {target}...")
    print(f"üìÑ Fichier de sortie: {html_path}")

    # Utiliser common.txt depuis le r√©pertoire courant
    selected_wordlist = "common.txt"
    wordlist_info = ""
    
    if os.path.exists(selected_wordlist):
        # Compter les lignes pour info
        try:
            with open(selected_wordlist, 'r') as f:
                line_count = sum(1 for line in f if line.strip() and not line.startswith('#'))
            wordlist_info = f"common.txt ({line_count} entr√©es)"
            print(f"üìã Wordlist trouv√©e: {wordlist_info}")
        except:
            wordlist_info = "common.txt"
            print(f"üìã Wordlist trouv√©e: {wordlist_info}")
    else:
        print(f"‚ùå Fichier common.txt non trouv√© dans le r√©pertoire courant")
        print("üì• Veuillez t√©l√©charger common.txt depuis :")
        print("   https://github.com/danielmiessler/SecLists/raw/master/Discovery/Web-Content/common.txt")
        sys.exit(1)

    # URLs √† tester
    base_urls = [f"http://{target}", f"https://{target}"]
    ferox_results = {}
    
    for base_url in base_urls:
        print(f"üîç Test de {base_url}...")
        
        try:
            # Feroxbuster avec options optimis√©es pour common.txt
            ferox_cmd = [
                "feroxbuster",
                "-u", base_url,
                "-w", selected_wordlist,
                "-t", "100",             # 100 threads (ferox est plus efficace avec plus de threads)
                "-d", "3",               # Profondeur 3 (bon compromis)
                "--timeout", "15",       # Timeout 15s
                "-x", "php,html,txt,js,css,xml,json,bak,old,tmp,asp,aspx,jsp",  # Extensions
                "-s", "200,204,301,302,307,308,401,403,405,500",  # Status codes int√©ressants
                "--auto-tune",           # Auto-tune pour optimiser les performances
                "-q",                    # Mode silencieux
                "-k",                    # Ignorer les certificats SSL
                "--no-recursion"         # Pas de r√©cursion automatique pour contr√¥ler le scan
            ]
            
            print(f"üöÄ Commande: {' '.join(ferox_cmd)}")
            
            ferox_result = subprocess.run(
                ferox_cmd, 
                capture_output=True, 
                text=True, 
                timeout=600  # 10 minutes max pour common.txt
            )
            
            output = ferox_result.stdout
            errors = ferox_result.stderr
            
            # Analyser les r√©sultats
            found_urls = []
            status_codes = {}
            
            if output:
                lines = output.strip().split('\n')
                for line in lines:
                    # Feroxbuster format: 200 GET 1234c http://example.com/path
                    # Ou: 200     GET       1234l      567w     8901c http://example.com/path
                    if any(code in line for code in ['200', '301', '302', '401', '403', '405', '500']):
                        parts = line.split()
                        if len(parts) >= 4:
                            # Trouver l'URL (commence par http)
                            url = None
                            status_code = None
                            for i, part in enumerate(parts):
                                if part.startswith('http'):
                                    url = part
                                    # Le code de statut est g√©n√©ralement le premier √©l√©ment
                                    if parts[0].isdigit():
                                        status_code = parts[0]
                                    break
                            
                            if url and status_code:
                                found_urls.append({'url': url, 'status': status_code, 'raw': line.strip()})
                                status_codes[status_code] = status_codes.get(status_code, 0) + 1
            
            if ferox_result.returncode == 0:
                status = f"‚úÖ Termin√© ({len(found_urls)} URLs trouv√©es)"
            else:
                status = f"‚ö†Ô∏è Termin√© avec erreurs (code {ferox_result.returncode})"
            
            ferox_results[base_url] = {
                'status': status,
                'found_urls': found_urls,
                'status_codes': status_codes,
                'output': output,
                'errors': errors,
                'returncode': ferox_result.returncode
            }
            
            print(f"   {status}")
            if status_codes:
                status_summary = ", ".join([f"{code}: {count}" for code, count in sorted(status_codes.items())])
                print(f"   üìä Codes de statut: {status_summary}")
            
        except subprocess.TimeoutExpired:
            print(f"   ‚è∞ Timeout pour {base_url}")
            ferox_results[base_url] = {
                'status': '‚è∞ Timeout (> 10 min)',
                'found_urls': [],
                'status_codes': {},
                'output': 'Scan interrompu par timeout',
                'errors': '',
                'returncode': -1
            }
        except FileNotFoundError:
            print(f"   ‚ùå Feroxbuster non trouv√©")
            ferox_results[base_url] = {
                'status': '‚ùå Outil manquant',
                'found_urls': [],
                'status_codes': {},
                'output': 'Feroxbuster non install√©',
                'errors': '',
                'returncode': -2
            }
            break
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
            ferox_results[base_url] = {
                'status': f'‚ùå Erreur: {e}',
                'found_urls': [],
                'status_codes': {},
                'output': str(e),
                'errors': '',
                'returncode': -3
            }

    # G√©n√©rer le rapport HTML
    try:
        total_urls = sum(len(r['found_urls']) for r in ferox_results.values())
        
        with open(html_path, "w", encoding='utf-8') as f:
            f.write(f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Rapport Feroxbuster - {target}</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        h1 {{ color: #2c3e50; border-bottom: 3px solid #e74c3c; padding-bottom: 10px; }}
        h2 {{ color: #34495e; margin-top: 30px; }}
        .info {{ background-color: #ebf7fd; padding: 15px; border-left: 4px solid #3498db; margin: 20px 0; border-radius: 0 5px 5px 0; }}
        .success {{ background-color: #d4edda; padding: 15px; border-left: 4px solid #28a745; margin: 20px 0; border-radius: 0 5px 5px 0; }}
        .warning {{ background-color: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 20px 0; border-radius: 0 5px 5px 0; }}
        .error {{ background-color: #f8d7da; color: #721c24; padding: 15px; border-left: 4px solid #dc3545; margin: 20px 0; border-radius: 0 5px 5px 0; }}
        .url-scan {{ background-color: #f8f9fa; padding: 15px; margin: 15px 0; border-radius: 5px; border-left: 4px solid #6c757d; }}
        .url-result {{ background-color: white; padding: 10px; margin: 5px 0; border-radius: 3px; font-family: monospace; font-size: 12px; display: flex; align-items: center; }}
        .status-200 {{ border-left: 3px solid #28a745; }}
        .status-301, .status-302, .status-307, .status-308 {{ border-left: 3px solid #17a2b8; }}
        .status-401 {{ border-left: 3px solid #fd7e14; }}
        .status-403 {{ border-left: 3px solid #ffc107; }}
        .status-404 {{ border-left: 3px solid #6c757d; }}
        .status-405 {{ border-left: 3px solid #e83e8c; }}
        .status-500 {{ border-left: 3px solid #dc3545; }}
        .status-code {{ padding: 3px 8px; border-radius: 3px; color: white; font-weight: bold; margin-right: 12px; min-width: 35px; text-align: center; }}
        .code-200 {{ background-color: #28a745; }}
        .code-301, .code-302, .code-307, .code-308 {{ background-color: #17a2b8; }}
        .code-401 {{ background-color: #fd7e14; }}
        .code-403 {{ background-color: #ffc107; color: black; }}
        .code-404 {{ background-color: #6c757d; }}
        .code-405 {{ background-color: #e83e8c; }}
        .code-500 {{ background-color: #dc3545; }}
        .stats {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0; }}
        .stat {{ background-color: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; border-left: 4px solid #007bff; }}
        .critical-findings {{ background-color: #f8d7da; padding: 15px; border-left: 4px solid #dc3545; margin: 20px 0; border-radius: 0 5px 5px 0; }}
        .wordlist-info {{ background-color: #e7f3ff; padding: 10px; border-left: 4px solid #0066cc; margin: 15px 0; border-radius: 0 3px 3px 0; }}
        pre {{ background-color: #2c3e50; color: #ecf0f1; padding: 15px; border-radius: 5px; overflow-x: auto; font-size: 11px; }}
        .url-text {{ word-break: break-all; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>‚ö° Rapport Feroxbuster - √ânum√©ration Web Rapide</h1>
        <div class="info">
            <strong>üéØ Cible:</strong> {target}<br>
            <strong>üìÖ Date:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}<br>
            <strong>üîß Outil:</strong> Feroxbuster Fast Directory Enumeration<br>
            <strong>üîç URLs de base test√©es:</strong> {len(base_urls)}
        </div>
        
        <div class="wordlist-info">
            <strong>üìã Wordlist utilis√©e:</strong> {wordlist_info}<br>
            <strong>‚ö° Strat√©gie:</strong> Scan rapide et r√©cursif avec common.txt local optimis√© pour Feroxbuster<br>
            <strong>üéØ Profondeur:</strong> 3 niveaux | <strong>üîó Threads:</strong> 100 | <strong>‚è±Ô∏è Timeout:</strong> 15s
        </div>
        
        <div class="stats">
            <div class="stat">
                <h3>{total_urls}</h3>
                <p>URLs trouv√©es</p>
            </div>""")

            # Statistiques des codes de statut
            all_status_codes = {}
            for result in ferox_results.values():
                for code, count in result['status_codes'].items():
                    all_status_codes[code] = all_status_codes.get(code, 0) + count

            for code, count in sorted(all_status_codes.items()):
                f.write(f"""
            <div class="stat">
                <h3>{count}</h3>
                <p>Code {code}</p>
            </div>""")

            f.write('</div>')

            if total_urls > 0:
                f.write(f'<div class="success"><strong>‚úÖ {total_urls} URLs d√©couvertes</strong> avec common.txt local et r√©cursion intelligente.</div>')
            else:
                f.write('<div class="warning"><strong>‚ö†Ô∏è Aucune URL d√©couverte</strong> avec common.txt local. Le site pourrait avoir une structure non-standard ou √™tre bien prot√©g√©.</div>')

            # Identifier les d√©couvertes critiques (optimis√© pour common.txt)
            critical_keywords = ['admin', 'login', 'password', 'config', 'backup', 'private', 'secret', 'debug', 'phpmyadmin', 'mysql']
            interesting_keywords = ['upload', 'api', 'panel', 'dashboard', 'test', 'dev', 'staging', 'auth']
            info_keywords = ['robots.txt', 'sitemap.xml', 'phpinfo', 'info.php', '.htaccess']
            
            critical_findings = []
            interesting_findings = []
            info_findings = []
            
            for url, result in ferox_results.items():
                for url_data in result['found_urls']:
                    url_path = url_data['url'].lower()
                    if any(keyword in url_path for keyword in critical_keywords):
                        critical_findings.append(url_data)
                    elif any(keyword in url_path for keyword in interesting_keywords):
                        interesting_findings.append(url_data)
                    elif any(keyword in url_path for keyword in info_keywords):
                        info_findings.append(url_data)

            if critical_findings:
                f.write('<div class="critical-findings">')
                f.write('<h3>üö® D√©couvertes Critiques</h3>')
                f.write('<p>URLs potentiellement sensibles d√©tect√©es :</p>')
                for finding in critical_findings:
                    status_class = f"status-{finding['status']}"
                    code_class = f"code-{finding['status']}"
                    f.write(f'''
                    <div class="url-result {status_class}">
                        <span class="status-code {code_class}">{finding['status']}</span>
                        <span class="url-text">üî¥ {finding['url']}</span>
                    </div>''')
                f.write('</div>')

            if interesting_findings:
                f.write('<div class="warning">')
                f.write('<h3>‚ö†Ô∏è D√©couvertes Int√©ressantes</h3>')
                f.write('<p>URLs m√©ritant une investigation :</p>')
                for finding in interesting_findings:
                    status_class = f"status-{finding['status']}"
                    code_class = f"code-{finding['status']}"
                    f.write(f'''
                    <div class="url-result {status_class}">
                        <span class="status-code {code_class}">{finding['status']}</span>
                        <span class="url-text">üü° {finding['url']}</span>
                    </div>''')
                f.write('</div>')

            if info_findings:
                f.write('<div class="info">')
                f.write('<h3>‚ÑπÔ∏è Fichiers d\'Information</h3>')
                f.write('<p>Fichiers informatifs standard d√©couverts :</p>')
                for finding in info_findings:
                    status_class = f"status-{finding['status']}"
                    code_class = f"code-{finding['status']}"
                    f.write(f'''
                    <div class="url-result {status_class}">
                        <span class="status-code {code_class}">{finding['status']}</span>
                        <span class="url-text">üîµ {finding['url']}</span>
                    </div>''')
                f.write('</div>')

            f.write('<h2>üìä R√©sultats par URL de Base</h2>')
            
            for base_url, result in ferox_results.items():
                f.write(f"""
        <div class="url-scan">
            <h3>üåê URL: {base_url}</h3>
            <p><strong>Statut:</strong> {result['status']}</p>
            <p><strong>URLs trouv√©es:</strong> {len(result['found_urls'])}</p>""")

                if result['status_codes']:
                    f.write('<p><strong>R√©partition des codes de statut:</strong> ')
                    status_summary = []
                    for code, count in sorted(result['status_codes'].items()):
                        status_summary.append(f"{code}: {count}")
                    f.write(' | '.join(status_summary))
                    f.write('</p>')
                
                if result['found_urls']:
                    f.write('<h4>üîç URLs d√©couvertes:</h4>')
                    
                    # Grouper par code de statut
                    urls_by_status = {}
                    for url_data in result['found_urls']:
                        status = url_data['status']
                        if status not in urls_by_status:
                            urls_by_status[status] = []
                        urls_by_status[status].append(url_data)
                    
                    for status_code in sorted(urls_by_status.keys()):
                        urls = urls_by_status[status_code]
                        f.write(f'<h5>Code {status_code} ({len(urls)} URLs)</h5>')
                        
                        for url_data in urls:
                            status_class = f"status-{url_data['status']}"
                            code_class = f"code-{url_data['status']}"
                            f.write(f'''
                            <div class="url-result {status_class}">
                                <span class="status-code {code_class}">{url_data['status']}</span>
                                <span class="url-text">{url_data['url']}</span>
                            </div>''')
                
                if result['errors']:
                    f.write(f'<details><summary>Erreurs/Avertissements</summary><pre>{result["errors"]}</pre></details>')
                
                f.write('</div>')

            f.write("""
        <h2>üõ°Ô∏è Recommandations de S√©curit√©</h2>
        <div class="info">
            <h3>üí° Actions Recommand√©es pour common.txt</h3>
            <ul>
                <li><strong>Code 200 (Succ√®s):</strong> Examinez le contenu pour des informations sensibles</li>
                <li><strong>Code 301/302 (Redirections):</strong> V√©rifiez les destinations des redirections</li>
                <li><strong>Code 401 (Non autoris√©):</strong> Ressources prot√©g√©es - testez l'authentification</li>
                <li><strong>Code 403 (Interdit):</strong> R√©pertoires existants mais prot√©g√©s - v√©rifiez la configuration</li>
                <li><strong>Code 405 (M√©thode non autoris√©e):</strong> Endpoint existe - testez d'autres m√©thodes HTTP</li>
                <li><strong>Code 500 (Erreur serveur):</strong> Erreurs pouvant r√©v√©ler des informations syst√®me</li>
                <li><strong>Panels d'admin:</strong> S√©curisez les interfaces d'administration d√©couvertes</li>
                <li><strong>APIs d√©couvertes:</strong> Testez l'authentification et les permissions</li>
            </ul>
        </div>
        
        <div class="info">
            <h3>‚ö° √Ä propos de Feroxbuster + common.txt</h3>
            <p><strong>Feroxbuster</strong> avec <strong>common.txt</strong> offre un √©quilibre optimal entre vitesse et couverture :</p>
            <ul>
                <li><strong>R√©cursion intelligente:</strong> Explore automatiquement les sous-r√©pertoires d√©couverts</li>
                <li><strong>Multi-threading:</strong> 100 threads simultan√©s pour une vitesse maximale</li>
                <li><strong>Auto-tuning:</strong> Ajuste automatiquement les performances selon la cible</li>
                <li><strong>Gestion d'√©tat:</strong> Analyse diff√©rents codes de statut HTTP</li>
                <li><strong>Extensions multiples:</strong> Teste automatiquement plusieurs extensions de fichiers</li>
            </ul>
        </div>
        
        <div class="warning">
            <strong>‚ö†Ô∏è Note importante:</strong> Ce scan utilise common.txt local avec r√©cursion limit√©e (profondeur 3). 
            Feroxbuster peut d√©couvrir plus de contenu avec des wordlists sp√©cialis√©es et une profondeur augment√©e.
        </div>
        
        <div class="info">
            <h3>üîç Analyse Manuelle Recommand√©e</h3>
            <ul>
                <li>Visitez chaque URL d√©couverte dans un navigateur</li>
                <li>Testez l'authentification sur les endpoints prot√©g√©s (401/403)</li>
                <li>Analysez les redirections pour comprendre la structure du site</li>
                <li>Testez diff√©rentes m√©thodes HTTP sur les endpoints 405</li>
                <li>Examinez les erreurs 500 pour des fuites d'informations</li>
                <li>V√©rifiez les permissions sur les APIs d√©couvertes</li>
                <li>Analysez le contenu des fichiers informatifs (robots.txt, etc.)</li>
            </ul>
        </div>
        
        <div class="info">
            <h3>üìä Guide des Codes de Statut HTTP</h3>
            <ul>
                <li><strong>200 (OK):</strong> Contenu accessible - √Ä examiner en priorit√©</li>
                <li><strong>301/302 (Redirection):</strong> Suivre la destination pour analyse</li>
                <li><strong>401 (Non autoris√©):</strong> Authentification requise - tester credentials</li>
                <li><strong>403 (Interdit):</strong> Ressource existe mais acc√®s refus√©</li>
                <li><strong>405 (M√©thode non autoris√©e):</strong> Endpoint valide, tester GET/POST/PUT</li>
                <li><strong>500 (Erreur serveur):</strong> Peut r√©v√©ler des informations sur l'infrastructure</li>
            </ul>
        </div>
        
        <div class="success">
            <h3>üöÄ Optimisations Feroxbuster Appliqu√©es</h3>
            <ul>
                <li><strong>Auto-tune activ√©:</strong> Optimisation automatique selon la r√©activit√© du serveur</li>
                <li><strong>Filtrage intelligent:</strong> Focus sur les codes de statut pertinents</li>
                <li><strong>Extensions cibl√©es:</strong> Test des extensions les plus courantes</li>
                <li><strong>R√©cursion contr√¥l√©e:</strong> Exploration des sous-r√©pertoires sans spirale infinie</li>
                <li><strong>Timeouts optimis√©s:</strong> √âquilibre entre vitesse et fiabilit√©</li>
            </ul>
        </div>
    </div>
</body>
</html>""")
        
        print(f"‚úÖ Rapport g√©n√©r√©: {html_path}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du rapport: {e}")
        return

    # Nettoyage - pas de wordlist temporaire √† supprimer
    # (common.txt est permanent dans le r√©pertoire)

    # Chiffrement
    try:
        if not os.path.exists(html_path) or os.path.getsize(html_path) == 0:
            print(f"‚ùå Fichier {html_path} invalide pour chiffrement")
            return
            
        print("üîí Chiffrement en cours...")
        encrypt_file(html_path)
        
        encrypted_path = html_path + ".aes"
        if os.path.exists(encrypted_path):
            encrypted_size = os.path.getsize(encrypted_path)
            print(f"‚úÖ Fichier chiffr√©: {encrypted_path} ({encrypted_size} bytes)")
        else:
            print("‚ùå Le fichier chiffr√© n'a pas √©t√© cr√©√©")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du chiffrement: {e}")

if __name__ == "__main__":
    main()